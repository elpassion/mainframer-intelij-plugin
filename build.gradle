import java.util.regex.Pattern

buildscript {
    ext.kotlin_version = '1.0.6'

    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.intellij' version "0.2.0"
    id 'net.researchgate.release' version '2.4.0'
}
apply plugin: 'java'
apply plugin: 'kotlin'

group 'com.elpassion.intelijidea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

sourceSets {
    main {
        java.srcDirs 'src/main/kotlin'
        kotlin.srcDirs 'src/main/kotlin'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDirs 'src/test/kotlin'
        kotlin.srcDirs 'src/test/kotlin'
    }
}

intellij {
    pluginName 'mainframer-plugin'
    publish {
        username project.findProperty("MF_PUBLISH_USER_NAME")
        password project.findProperty("MF_PUBLISH_PASSWORD")
        channel 'nightly'
    }
    patchPluginXml {
        version readVersion()
        sinceBuild "145"
    }
}

private String readVersion() {
    def versionFile = new File('version.gradle.properties')
    def matcher = Pattern.compile("version=(\\d+.\\d+.\\d+)").matcher(versionFile.text)
    if (matcher.find()) {
        return matcher.group(1)
    } else {
        throw new RuntimeException("Version not found!")
    }
}

dependencies {
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.6'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.1.0'
    compile 'io.reactivex.rxjava2:rxjava:2.0.5'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'


    testCompile "com.nhaarman:mockito-kotlin:1.2.0"
    testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.1'
}

release {
    buildTasks = ['build']
    // Do not change the tagTemplate value to double quotes or the version will be evaluated before
    // the SNAPSHOT version is updated to the release version.
    tagTemplate = 'v$version'
    versionPropertyFile = 'version.gradle.properties'
    git {
        requireBranch = 'master'
    }
    failOnSnapshotDependencies = false
}